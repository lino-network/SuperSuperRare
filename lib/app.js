const express = require('express')
const { createBundleRenderer } = require('vue-server-renderer')
const fs = require('fs')
const favicon = require('serve-favicon')
const LRU = require('lru-cache')
const compression = require('compression')
var os = require('os');

const config = require('./config')

const DEFAULT_OPTIONS = {
  prodOnly: false,
}

function readHttpServiceAddr(serviceName, defaultVal) {
  let hostEnvKey = "LINOAPP_" + serviceName + "_SERVICE_HOST";
  let portEnvKey = "LINOAPP_" + serviceName + "_SERVICE_PORT";

  let host = process.env[hostEnvKey];
  if (host == undefined || host == "") {
      return defaultVal;
  }

  let port = process.env[portEnvKey];
  if (port == undefined || port == "") {
      return defaultVal;
  }
  if ((host + ":" + port).includes('http')) {
    return host + ":" + port;
  } else {
    return 'http://' + host + ":" + port;
  }
}

module.exports = (app, options) => {
  console.log('server side VUE_APP_GRAPHQL_HTTP: ', process.env.VUE_APP_GRAPHQL_HTTP);
  global.backendURL = readHttpServiceAddr('APOLLO', process.env.VUE_APP_GRAPHQL_HTTP || 'https://graph.dlive.tv/');
  options = Object.assign({}, DEFAULT_OPTIONS, options)

  const isProd = process.env.NODE_ENV === 'production'

  if (options.prodOnly && !isProd) return

  const templatePath = config.templatePath

  try {
    // Vue bundle renderer
    let renderer
    // In development: wait for webpack compilation
    // when receiving a SSR request
    let readyPromise

    const defaultRendererOptions = {
      cache: LRU({
        max: 1000,
        maxAge: 1000 * 60 * 15,
      }),
      runInNewContext: false,
      inject: false,
    }
    let renderers = {}
    if (isProd) {
      let pages = require('./pages.js')
      let serverBundle
      let clientManifest
      let template
      for (let i of Object.keys(pages)) {
        template = fs.readFileSync(templatePath + `/template/${i}/index.html`, 'utf-8')
        console.log(template)
        serverBundle = require(`${config.distPath}/js/${i}/vue-ssr-server-bundle.json`)
        clientManifest = require(`${config.distPath}/js/${i}/vue-ssr-client-manifest.json`)
        renderers[i] = createBundleRenderer(serverBundle, {
          ...defaultRendererOptions,
          template,
          clientManifest,
          shouldPrefetch: (file, type) => {
            // type is inferred based on the file extension.
            // https://fetch.spec.whatwg.org/#concept-request-destination
            if (file.includes('video') || file.includes('cropper') || file.includes('infiniteload') || file.includes('common') || file.includes('lang')) {
              return false;
            }
            return true;
          }
        })
      }
      // In production: create server renderer using template and built server bundle.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      // The client manifests are optional, but it allows the renderer
      // to automatically infer preload/prefetch links and directly add <script>
      // tags for any async chunks used during render, avoiding waterfall requests.
    } else {
      // In development: setup the dev server with watch and hot-reload,
      // and create a new renderer on bundle / index template update.
      const { setupDevServer } = require('./dev-server')
      readyPromise = setupDevServer({
        server: app,
        templatePath,
        onUpdate: ({ serverBundle }, options) => {
          // Re-create the bundle renderer
          renderer = createBundleRenderer(serverBundle, {
            ...defaultRendererOptions,
            ...options,
          })
        },
      })
    }

    // Serve static files
    const serve = (filePath, cache) => express.static(filePath, {
      maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
      index: false,
    })

    // Serve static files
    app.enable('etag') // use strong etags
    app.use(compression({ threshold: 0 }))
    app.use(favicon(config.favicon))
    if (config.api.hasPlugin('pwa')) {
      app.use('/service-worker.js', serve(config.serviceWorkerPath, true))
    }
    const serveStaticFiles = serve(config.distPath, true)
    app.use((req, res, next) => {
      res.setHeader("Cache-Control", "public")
      res.setHeader("Expires", new Date(Date.now() + 86400000).toUTCString());
      if (/index\.html/g.test(req.path)) {
        next()
      } else {
        serveStaticFiles(req, res, next)
      }
    })

    // Render the Vue app using the bundle renderer
    const renderApp = (req, res) => {
      res.setHeader('Content-Type', 'text/html')
      res.setHeader('Cache-Control', 'public, max-age=0, s-maxage=20')
      // res.setHeader("Expires", new Date(Date.now() + 20000).toUTCString());
      res.setHeader('X-Frame-Options', 'DENY')
      const context = {
        req,
        url: req.url,
        title: config.defaultTitle,
      }
      if (req.path.includes('haha')) {
        renderers['sub'].renderToString(context, (err, html) => {
          if (err) {
            const code = 500
            console.error(`error during render : ${req.url}`)
            console.error(err)
  
            // Render Error Page
            res.status(code)
            let text = '500 | Internal Server Error'
  
            if (!isProd) {
              text += '<br>'
              text += `<pre>${err.stack}</pre>`
            }
  
            res.send(text)
          } else {
            res.status(context.httpCode || 200).send(html)
          }
        })
      } else {
        renderers['main'].renderToString(context, (err, html) => {
          if (err) {
            const code = 500
            console.error(`error during render : ${req.url}`)
            console.error(err)
  
            // Render Error Page
            res.status(code)
            let text = '500 | Internal Server Error'
  
            if (!isProd) {
              text += '<br>'
              text += `<pre>${err.stack}</pre>`
            }
  
            res.send(text)
          } else {
            res.status(context.httpCode || 200).send(html)
          }
        })
      }
    }

    // Process SSR requests
    let ssr
    if (isProd) {
      ssr = renderApp
    } else {
      // In development: wait for webpack compilation
      // when receiving a SSR request
      ssr = (req, res) => {
        readyPromise.then(() => renderApp(req, res)).catch(console.error)
      }
    }
    app.get('*', (req, res, next) => {
      console.log(os.freemem());
      if (config.skipRequests(req)) {
        return next()
      }
      ssr(req, res)
    })
  } catch (e) {
    console.log(e)
    return e;
  }
}
